// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code.
    
    //zx
    Mux16(a=x,b=false,sel=zx,out=zxOut);
    
    //negation of x
    Not16(in=zxOut,out=negX);
    //nx
    Mux16(a=zxOut,b=negX,sel=nx,out=nxOut);

    //zy
    Mux16(a=y,b=false,sel=zy,out=zyOut);

    //negation of y
    Not16(in=zyOut,out=negY);
    //ny
    Mux16(a=zyOut,b=negY,sel=ny,out=nyOut);

    //f
    And16(a=nxOut,b=nyOut,out=andOut);
    Add16(a=nxOut,b=nyOut,out=addOut);
    Mux16(a=andOut,b=addOut,sel=f,out=fOut);

    //no
    Not16(in=fOut,out=nOut);
    Mux16(a=fOut,b=nOut,sel=no,out=out, out[15]=ng,
    out[0]=z0, out[1]=z1, out[2]=z2, out[3]=z3,
    out[4]=z4, out[5]=z5, out[6]=z6, out[7]=z7,
    out[8]=z8, out[9]=z9, out[10]=z10, out[11]=z11,
    out[12]=z12, out[13]=z13, out[14]=z14, out[15]=z15);

    //zr
    //cascade bits down to 1 bit
    Or(a=z0,b=z1, out=o0);
    Or(a=z2,b=z3, out=o1);
    Or(a=z4,b=z5, out=o2);
    Or(a=z6,b=z7, out=o3);
    Or(a=z8,b=z9, out=o4);
    Or(a=z10,b=z11,out=o5);
    Or(a=z12,b=z13,out=o6);
    Or(a=z14,b=z15,out=o7);
    
    Or(a=o0,b=o1,out=o00);
    Or(a=o2,b=o3,out=o01);
    Or(a=o4,b=o5,out=o02);
    Or(a=o6,b=o7,out=o03);

    Or(a=o00,b=o01,out=o10);
    Or(a=o02,b=o03,out=o11);

    //Nor
    Or(a=o10,b=o11,out=nzr);
    Not(in=nzr,out=zr);
    

}